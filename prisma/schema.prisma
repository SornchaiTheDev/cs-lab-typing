// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl         = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
}

enum roles {
  ADMIN
  TEACHER
  STUDENT
}

model users {
  id               Int               @id @default(autoincrement())
  student_id       String            @unique
  full_name        String            @unique
  email            String            @unique
  password         String?
  last_logined     DateTime?
  roles            roles[]
  auth_loggers     auth_logger[]
  authors          courses[]         @relation("course_author")
  students         sections[]        @relation("section_student")
  instructors      sections[]        @relation("section_instructor")
  TAs              sections[]        @relation("section_ta")
  created_sections sections[]
  created_at       DateTime          @default(now())
  updated_at       DateTime?         @updatedAt
  deleted_at       DateTime?
  sectionsId       Int?
  tasks            tasks[]
  task_history     task_history[]
  section_history  section_history[]
  lab_history      lab_history[]
}

model auth_logger {
  id         Int       @id @default(autoincrement())
  type       String
  date       DateTime  @default(now())
  user       users     @relation(fields: [user_id], references: [id])
  user_id    Int
  ip_address String
  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt
  deleted_at DateTime?
}

model semesters {
  id         Int        @id @default(autoincrement())
  year       String
  term       String
  startDate  DateTime
  created_at DateTime   @default(now())
  updated_at DateTime?  @updatedAt
  sections   sections[]

  @@unique([year, term])
}

model courses {
  id         Int        @id @default(autoincrement())
  number     String     @unique
  name       String     @unique
  note       String?
  comments   String?
  labs       labs[]
  created_at DateTime   @default(now())
  updated_at DateTime?  @updatedAt
  deleted_at DateTime?
  authors    users[]    @relation("course_author")
  sections   sections[]
}

model sections {
  id            Int               @id @default(autoincrement())
  semester      semesters         @relation(fields: [semester_id], references: [id])
  semester_id   Int
  course        courses           @relation(fields: [course_id], references: [id])
  course_id     Int
  name          String            @unique
  instructors   users[]           @relation("section_instructor")
  students      users[]           @relation("section_student")
  tas           users[]           @relation("section_ta")
  note          String?
  active        Boolean
  created_by    users             @relation(fields: [created_by_id], references: [id])
  created_by_id Int
  created_at    DateTime          @default(now())
  updated_at    DateTime?         @updatedAt
  deleted_at    DateTime?
  history       section_history[]
}

model section_history {
  id         Int      @id @default(autoincrement())
  user       users    @relation(fields: [user_id], references: [id])
  user_id    Int
  action     String
  created_at DateTime @default(now())
  section    sections @relation(fields: [sectionId], references: [id])
  sectionId  Int
}

model labs {
  id         Int           @id @default(autoincrement())
  name       String        @unique
  tags       tags[]        @relation("lab_tag")
  course     courses       @relation(fields: [courseId], references: [id])
  courseId   Int
  isDisabled Boolean
  tasks      lab_task[]
  history    lab_history[]
  created_at DateTime      @default(now())
  updated_at DateTime?     @updatedAt
  deleted_at DateTime?
}

model lab_task {
  id         Int       @id @default(autoincrement())
  order      Int
  lab        labs      @relation(fields: [lab_id], references: [id])
  lab_id     Int
  task       tasks     @relation(fields: [task_id], references: [id])
  task_id    Int
  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt
  deleted_at DateTime?
}

model lab_history {
  id         Int      @id @default(autoincrement())
  user       users    @relation(fields: [user_id], references: [id])
  user_id    Int
  action     String
  created_at DateTime @default(now())
  lab        labs     @relation(fields: [labId], references: [id])
  labId      Int
}

model tags {
  id         Int       @id @default(autoincrement())
  name       String    @unique
  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt
  deleted_at DateTime?
  labs       labs[]    @relation("lab_tag")
  tasks      tasks[]   @relation("task_tag")
}

model tasks {
  id               Int            @id @default(autoincrement())
  name             String
  type             task_type
  language         String?
  tags             tags[]         @relation("task_tag")
  owner            users          @relation(fields: [usersId], references: [id])
  usersId          Int
  isPrivate        Boolean
  note             String?
  body             String?
  labs             lab_task[]
  submission_count Int            @default(0)
  created_at       DateTime       @default(now())
  updated_at       DateTime?      @updatedAt
  deleted_at       DateTime?
  history          task_history[]
}

model task_history {
  id         Int      @id @default(autoincrement())
  user       users    @relation(fields: [user_id], references: [id])
  user_id    Int
  action     String
  created_at DateTime @default(now())
  tasks      tasks    @relation(fields: [tasksId], references: [id])
  tasksId    Int
}

enum task_type {
  Lesson
  Problem
  Typing
}
