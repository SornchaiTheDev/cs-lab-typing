// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl         = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
}

enum roles {
  ADMIN
  TEACHER
  STUDENT
}

model users {
  id                Int                 @id @default(autoincrement())
  student_id        String              @unique
  full_name         String              @unique
  email             String              @unique
  password          String?
  last_logined      DateTime?
  roles             roles[]
  auth_loggers      auth_loggers[]
  authors           courses[]           @relation("course_author")
  students          sections[]          @relation("section_student")
  instructors       sections[]          @relation("section_instructor")
  TAs               sections[]          @relation("section_ta")
  created_sections  sections[]
  sectionsId        Int?
  created_tasks     tasks[]
  task_histories    task_histories[]
  section_histories section_histories[]
  lab_histories     lab_histories[]
  submissions       submissions[]
  created_at        DateTime            @default(now())
  updated_at        DateTime?           @updatedAt
  deleted_at        DateTime?
}

model auth_loggers {
  id         Int       @id @default(autoincrement())
  type       String
  date       DateTime  @default(now())
  user       users     @relation(fields: [user_id], references: [id])
  user_id    Int
  ip_address String
  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt
  deleted_at DateTime?
}

model semesters {
  id         Int        @id @default(autoincrement())
  year       String
  term       String
  startDate  DateTime
  sections   sections[]
  created_at DateTime   @default(now())
  updated_at DateTime?  @updatedAt
  deleted_at DateTime?

  @@unique([year, term])
}

model courses {
  id         Int        @id @default(autoincrement())
  number     String     @unique
  name       String     @unique
  note       String?
  comments   String?
  labs       labs[]
  created_at DateTime   @default(now())
  updated_at DateTime?  @updatedAt
  deleted_at DateTime?
  authors    users[]    @relation("course_author")
  sections   sections[]
}

model sections {
  id            Int                 @id @default(autoincrement())
  semester      semesters           @relation(fields: [semester_id], references: [id])
  semester_id   Int
  course        courses             @relation(fields: [course_id], references: [id])
  course_id     Int
  name          String              @unique
  labs_order    Int[]
  labs          labs[]              @relation("section_lab")
  instructors   users[]             @relation("section_instructor")
  students      users[]             @relation("section_student")
  tas           users[]             @relation("section_ta")
  note          String?
  active        Boolean
  submissions   submissions[]
  labs_status   labs_status[]
  created_by    users               @relation(fields: [created_by_id], references: [id])
  created_by_id Int
  history       section_histories[]
  created_at    DateTime            @default(now())
  updated_at    DateTime?           @updatedAt
  deleted_at    DateTime?
}

model section_histories {
  id         Int      @id @default(autoincrement())
  user       users    @relation(fields: [user_id], references: [id])
  user_id    Int
  action     String
  created_at DateTime @default(now())
  section    sections @relation(fields: [sectionId], references: [id])
  sectionId  Int
}

model labs {
  id          Int             @id @default(autoincrement())
  name        String          @unique
  tags        tags[]          @relation("lab_tag")
  course      courses         @relation(fields: [courseId], references: [id])
  courseId    Int
  isDisabled  Boolean
  tasks_order Int[]
  tasks       tasks[]         @relation("lab_task")
  history     lab_histories[]
  sections    sections[]      @relation("section_lab")
  submissions submissions[]
  status      labs_status[]
  created_at  DateTime        @default(now())
  updated_at  DateTime?       @updatedAt
  deleted_at  DateTime?
}

model labs_status {
  id         Int       @id @default(autoincrement())
  labs       labs      @relation(fields: [labId], references: [id])
  labId      Int
  section    sections  @relation(fields: [sectionId], references: [id])
  sectionId  Int
  status     LabStatus @default(ACTIVE)
  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt

  @@unique([labId, sectionId])
}

enum LabStatus {
  ACTIVE
  READONLY
  DISABLED
}

model lab_histories {
  id         Int      @id @default(autoincrement())
  user       users    @relation(fields: [user_id], references: [id])
  user_id    Int
  action     String
  created_at DateTime @default(now())
  lab        labs     @relation(fields: [labId], references: [id])
  labId      Int
}

model tags {
  id         Int       @id @default(autoincrement())
  name       String    @unique
  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt
  deleted_at DateTime?
  labs       labs[]    @relation("lab_tag")
  tasks      tasks[]   @relation("task_tag")
}

model tasks {
  id               Int              @id @default(autoincrement())
  name             String
  type             task_type
  language         String?
  tags             tags[]           @relation("task_tag")
  owner            users            @relation(fields: [usersId], references: [id])
  usersId          Int
  isPrivate        Boolean
  note             String?
  body             String?
  labs             labs[]           @relation("lab_task")
  submission_count Int              @default(0)
  submissions      submissions[]
  created_at       DateTime         @default(now())
  updated_at       DateTime?        @updatedAt
  deleted_at       DateTime?
  history          task_histories[]
}

model task_histories {
  id         Int      @id @default(autoincrement())
  user       users    @relation(fields: [user_id], references: [id])
  user_id    Int
  action     String
  created_at DateTime @default(now())
  tasks      tasks    @relation(fields: [tasksId], references: [id])
  tasksId    Int
}

enum submission_type {
  NOT_SUBMITTED
  PASSED
  FAILED
}

model submissions {
  id               Int                @id @default(autoincrement())
  user             users              @relation(fields: [user_id], references: [id])
  user_id          Int
  task             tasks              @relation(fields: [task_id], references: [id])
  task_id          Int
  lab              labs               @relation(fields: [lab_id], references: [id])
  lab_id           Int
  section          sections           @relation(fields: [section_id], references: [id])
  section_id       Int
  status           submission_type
  task_type        task_type
  typing_histories typing_histories[]
  created_at       DateTime           @default(now())
  updated_at       DateTime?          @updatedAt

  @@unique([user_id, task_id, section_id, lab_id])
}

model typing_histories {
  id             Int         @id @default(autoincrement())
  submission     submissions @relation(fields: [submission_id], references: [id])
  submission_id  Int
  raw_speed      Float
  adjusted_speed Float
  percent_error  Float
  started_at     DateTime
  ended_at       DateTime
  created_at     DateTime    @default(now())
  updated_at     DateTime?   @updatedAt
}

enum task_type {
  Lesson
  Problem
  Typing
}
